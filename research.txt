Ove91 divides parallel simulation approaches into conservative and optimistic approaches, especially within the actor model.

* In a conservative approach, a process will only compute events (advances in time) when it knows it won't receive any more messages from other processes.
* In an optimistic approach, a process will continue computation until it receives a message with a lower timestamp than its current 'local virtual time', and will then roll back everything it's done, send cancellation messages to all the processes it has interacted with since that point in time, and restart computation with the new message.

Conservative approaches, according to Overeinder et al, are more suitable for low-memory situations where the topology of process interaction is more or less known. It relies on lookahead properties of the topology to decide when to advance computation. Deadlocks can occur if, for example, a ring of processes are waiting for each other before advancing computation. This can be avoided with null-messages (letting each process know that the sending process has advanced past a certain point and therefore won't be sending messages that might affect anything before that time) or it can be remedied with controlling processes observing the system and watching for deadlocks.

Optimistic approaches use more memory (each process must be able to roll back its own state), but are more amenable to dynamic topologies. Two sub-approaches are used: aggressive cancellation, where anti-messages are sent to every other process that a rolling-back process has interacted with, and lazy cancellation, where the process first recomputes any messages it might send up to its last send message, then only sends cancellation messages for messages it hasn't recomputed. Lazy cancellation obviously adds even more memory overhead, since each process must remember not only 1) its own state and 2) the other processes it has interacted with, but 3) every message it has sent. Mind, these logs go back an undefined amount of time, perhaps determined by the average latency of the network or something. Probably we'll start with untruncated logs and figure that out by measurement.

Yeah, I think we are going to have to go with an optimistic, aggressive-cancellation approach. This is pretty much what I was afraid of from the outset of this project. I was thinking, "Man, keeping track of every agent's state in case we need to roll it back seems so naive. There must be a better solution!" Turns out, no, there is no better solution according to Benno Overeinder of the University of Amsterdam.
